generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  role          UserRole  @default(USER)
  address       String?
  phone       String?

  review Review[]
  orders Order[]
  wishlist Json?
  cart Json?
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// model Customer {
//   id        String   @id @default(uuid())
//   name      String
//   email     String
//   phone     String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   city      String
//   country   String
//   district  String
//   orders    Order?
// }

model Restaurant {
  name         String   @unique
  slug         String?
  deliveryTime String?
  openingHour  String?
  closingHour  String?
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  image        String?
  id           String   @id @default(uuid())
  email        String   @unique
  password     String?
  address      String?
  foods        Food[]
  orders        Order[]
}

model Food {
  id           String     @id @default(uuid())
  name         String
  image        String?
  slug         String?
  price        Decimal
  stock        String?
  description  String?
  quantity Int? @default(1)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  orders Order[]
  review Review[]
  categoryId   String
  RestaurantId String
  restaurant   Restaurant @relation(fields: [RestaurantId], references: [id])
  category     Category   @relation(fields: [categoryId], references: [id])
}

model Category {
  id        String    @unique @default(uuid())
  cat_id    Int?  @default(autoincrement()) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  slug      String   @unique
  food      Food[]
}

// model Order {
//   id         String   @id @default(uuid())
//   order_id   Int?
//   value      Decimal
//   quantity   Int?
//   status     Status   @default(UnPaid)
//   items Json?
//   CustomerId String   @unique
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   customer   Customer @relation(fields: [CustomerId], references: [id])
// }

model Order {
  id           Int         @id @default(autoincrement())
  orderNumber  String?      @unique @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userName String?
  userEmail String?
  items        Json?
  status     Status?   @default(UnPaid)
  price Decimal?
  payment_id   String?      @unique
  delivery   String?
  notes String?
  products Food[]
  billingname  String?
   billingemail String?
   billingphone String?
   billingaddress String?
  user     User?   @relation(fields: [userId], references: [id])
  userId String?
  restaurantName   String?
  restaurant     Restaurant?   @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}


model Review {
  id        String    @unique @default(uuid())
  review_id    Int?  @default(autoincrement()) 
  rating      Int?
  comment      String?  
  user     User?   @relation(fields: [userId], references: [id])
  userId String?
  products     Food?   @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




enum Status {
  Paid
  UnPaid
}

enum UserRole {
  USER
  ADMIN
  DELIVERY_MAN
  SUPER_ADMIN
}


// enum Delivery {
//   PENDING
//   IN_PROGRESS
//   DELIVERED
// }
